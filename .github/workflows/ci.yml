name: CI

on:
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        id: restore
        run: |
          start=$(date +%s)
          dotnet restore Parking.sln
          end=$(date +%s)
          duration=$((end - start))
          printf "duration=%02d:%02d\n" $((duration/60)) $((duration%60)) >> "$GITHUB_OUTPUT"

      - name: Build
        id: build_step
        run: |
          start=$(date +%s)
          dotnet build Parking.sln --configuration Release --no-restore
          end=$(date +%s)
          duration=$((end - start))
          printf "duration=%02d:%02d\n" $((duration/60)) $((duration%60)) >> "$GITHUB_OUTPUT"

      - name: Publicar resumo
        if: always()
        env:
          RESTORE_DURATION: ${{ steps.restore.outputs.duration }}
          RESTORE_OUTCOME: ${{ steps.restore.outcome }}
          BUILD_DURATION: ${{ steps.build_step.outputs.duration }}
          BUILD_OUTCOME: ${{ steps.build_step.outcome }}
        run: |
          icon() {
            case "$1" in
              success) printf '✅' ;;
              failure) printf '❌' ;;
              cancelled|skipped) printf '⚠️' ;;
              *) printf '⚠️' ;;
            esac
          }

          restore_icon=$(icon "$RESTORE_OUTCOME")
          build_icon=$(icon "$BUILD_OUTCOME")

          {
            echo "### Build"
            echo ""
            echo "| Descrição | Tempo | Resultado |"
            echo "| --- | --- | --- |"
            echo "| Restore | ${RESTORE_DURATION:-N/A} | ${restore_icon} |"
            echo "| Build | ${BUILD_DURATION:-N/A} | ${build_icon} |"
          } >> "$GITHUB_STEP_SUMMARY"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        id: lint_restore
        run: |
          start=$(date +%s)
          dotnet restore Parking.sln
          end=$(date +%s)
          duration=$((end - start))
          printf "duration=%02d:%02d\n" $((duration/60)) $((duration%60)) >> "$GITHUB_OUTPUT"

      - name: Verificar formatação
        id: format_check
        continue-on-error: true
        run: |
          start=$(date +%s)
          dotnet format Parking.sln --verify-no-changes
          end=$(date +%s)
          duration=$((end - start))
          printf "duration=%02d:%02d\n" $((duration/60)) $((duration%60)) >> "$GITHUB_OUTPUT"

      - name: Aplicar formatação
        if: ${{ steps.format_check.outcome == 'failure' }}
        run: |
          dotnet format Parking.sln

      - name: Validar permissão para criar PR
        id: pr_permission
        if: ${{ steps.format_check.outcome == 'failure' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          api="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls"
          payload='{"title":"","head":"","base":""}'
          status=$(curl -sS -o response.json -w "%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$api" \
            -d "$payload")

          if [ "$status" = "422" ]; then
            echo "Permissão confirmada para criação de pull requests."
            echo "can_create=true" >> "$GITHUB_OUTPUT"
          else
            echo "Falha ao validar permissão para criar pull requests (status $status):"
            cat response.json
            echo "can_create=false" >> "$GITHUB_OUTPUT"
          fi

          rm -f response.json

      - name: Preparar branch de correção de formatação
        id: prepare_branch
        if: ${{ steps.format_check.outcome == 'failure' && steps.pr_permission.outputs.can_create == 'true' }}
        env:
          FORMAT_BRANCH: ci/format/${{ github.event.pull_request.number }}-${{ github.run_id }}-${{ github.run_attempt }}
        run: |
          branch="${FORMAT_BRANCH}"
          git switch -c "$branch"
          echo "FORMAT_BRANCH=$branch" >> "$GITHUB_ENV"
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

      - name: Commit e push das correções de formatação
        id: commit_format
        if: ${{ steps.format_check.outcome == 'failure' && steps.pr_permission.outputs.can_create == 'true' }}
        env:
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORMAT_BRANCH: ${{ steps.prepare_branch.outputs.branch }}
        run: |
          git config user.name "$PR_AUTHOR"
          git config user.email "${PR_AUTHOR}@users.noreply.github.com"
          git add .
          if git diff --cached --quiet; then
            echo "Nenhuma alteração para commitar."
            echo "changes=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore: apply dotnet format"
            git push origin HEAD:${FORMAT_BRANCH}
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Criar pull request com correções
        id: create_pr
        if: ${{ steps.format_check.outcome == 'failure' && steps.pr_permission.outputs.can_create == 'true' && steps.commit_format.outputs.changes == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORMAT_BRANCH: ${{ steps.prepare_branch.outputs.branch }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_BASE: ${{ github.event.pull_request.base.ref }}
          GH_REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
        run: |
          title="chore: format fixes for #${PR_NUMBER}"
          body=$(cat <<EOF
## Summary
- Automated formatting fixes generated by the CI lint job for PR #${PR_NUMBER} opened by @${ACTOR}.

## Details
This pull request foi aberto automaticamente porque `dotnet format` encontrou problemas na pull request original (#${PR_NUMBER}). Faça o review e o merge para aplicar as correções de estilo.
EOF
)

          pr_url=$(gh pr create --title "$title" --body "$body" --base "$PR_BASE" --head "$FORMAT_BRANCH")
          echo "Pull request criado: $pr_url"
          echo "pr_url=$pr_url" >> "$GITHUB_OUTPUT"

      - name: Forçar falha do job após correções
        if: ${{ steps.format_check.outcome == 'failure' }}
        run: |
          echo "dotnet format encontrou problemas e aplicou correções."
          exit 1

      - name: Publicar resumo
        if: always()
        env:
          RESTORE_DURATION: ${{ steps.lint_restore.outputs.duration }}
          RESTORE_OUTCOME: ${{ steps.lint_restore.outcome }}
          FORMAT_DURATION: ${{ steps.format_check.outputs.duration }}
          FORMAT_OUTCOME: ${{ steps.format_check.outcome }}
          FORMAT_PERMISSION: ${{ steps.pr_permission.outputs.can_create }}
          FORMAT_PR_URL: ${{ steps.create_pr.outputs.pr_url }}
          FORMAT_CHANGES: ${{ steps.commit_format.outputs.changes }}
        run: |
          icon() {
            case "$1" in
              success) printf '✅' ;;
              failure) printf '❌' ;;
              cancelled|skipped) printf '⚠️' ;;
              *) printf '⚠️' ;;
            esac
          }

          restore_icon=$(icon "$RESTORE_OUTCOME")
          format_icon=$(icon "$FORMAT_OUTCOME")

          pr_cell="N/A"
          if [ "$FORMAT_OUTCOME" = "failure" ]; then
            if [ "$FORMAT_PERMISSION" = "true" ]; then
              if [ "$FORMAT_CHANGES" = "false" ]; then
                pr_cell="Sem alterações após formatar"
              elif [ -n "$FORMAT_PR_URL" ]; then
                pr_cell="[PR de correção]($FORMAT_PR_URL)"
              else
                pr_cell="PR não criado"
              fi
            elif [ "$FORMAT_PERMISSION" = "false" ]; then
              pr_cell="Permissão insuficiente"
            else
              pr_cell="Permissão não verificada"
            fi
          fi

          {
            echo "### Lint"
            echo ""
            echo "| Descrição | Tempo | Resultado | PR de correção |"
            echo "| --- | --- | --- | --- |"
            echo "| Restore | ${RESTORE_DURATION:-N/A} | ${restore_icon} | N/A |"
            echo "| dotnet format | ${FORMAT_DURATION:-N/A} | ${format_icon} | ${pr_cell} |"
          } >> "$GITHUB_STEP_SUMMARY"

  test:
    name: Testes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        id: test_restore
        run: |
          start=$(date +%s)
          dotnet restore Parking.sln
          end=$(date +%s)
          duration=$((end - start))
          printf "duration=%02d:%02d\n" $((duration/60)) $((duration%60)) >> "$GITHUB_OUTPUT"

      - name: Testes
        id: test
        run: |
          start=$(date +%s)
          dotnet test Parking.sln --configuration Release --results-directory TestResults --collect:"XPlat Code Coverage" --verbosity normal
          end=$(date +%s)
          duration=$((end - start))
          printf "duration=%02d:%02d\n" $((duration/60)) $((duration%60)) >> "$GITHUB_OUTPUT"

      - name: Extrair cobertura
        id: coverage
        if: ${{ always() && steps.test.outcome == 'success' }}
        run: |
          python <<'PY'
          import glob
          import os
          import xml.etree.ElementTree as ET

          paths = glob.glob('TestResults/**/coverage.cobertura.xml', recursive=True)
          if not paths:
              raise SystemExit('Arquivo de cobertura não encontrado.')

          tree = ET.parse(paths[0])
          root = tree.getroot()
          line_rate = root.get('line-rate') or '0'
          coverage = round(float(line_rate) * 100, 2)
          display = f"{coverage:.2f}".rstrip('0').rstrip('.')

          if coverage >= 90:
              color = 'brightgreen'
          elif coverage >= 75:
              color = 'green'
          elif coverage >= 60:
              color = 'yellow'
          else:
              color = 'red'

          badge_label = display.replace('.', '%2E') + '%25'

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f"percent={display}\n")
              fh.write(f"badge_label={badge_label}\n")
              fh.write(f"badge_color={color}\n")
          PY

      - name: Publicar resumo
        if: always()
        env:
          RESTORE_DURATION: ${{ steps.test_restore.outputs.duration }}
          RESTORE_OUTCOME: ${{ steps.test_restore.outcome }}
          TEST_DURATION: ${{ steps.test.outputs.duration }}
          TEST_OUTCOME: ${{ steps.test.outcome }}
          COVERAGE_PERCENT: ${{ steps.coverage.outputs.percent }}
          COVERAGE_BADGE_LABEL: ${{ steps.coverage.outputs.badge_label }}
          COVERAGE_BADGE_COLOR: ${{ steps.coverage.outputs.badge_color }}
        run: |
          icon() {
            case "$1" in
              success) printf '✅' ;;
              failure) printf '❌' ;;
              cancelled|skipped) printf '⚠️' ;;
              *) printf '⚠️' ;;
            esac
          }

          restore_icon=$(icon "$RESTORE_OUTCOME")
          test_icon=$(icon "$TEST_OUTCOME")

          {
            echo "### Testes"
            echo ""
            echo "| Descrição | Tempo | Resultado |"
            echo "| --- | --- | --- |"
            echo "| Restore | ${RESTORE_DURATION:-N/A} | ${restore_icon} |"
            echo "| Testes | ${TEST_DURATION:-N/A} | ${test_icon} |"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ -n "$COVERAGE_PERCENT" ]; then
            {
              echo ""
              echo "#### Cobertura"
              echo ""
              echo "| Coverage | Badge |"
              echo "| --- | --- |"
              echo "| ${COVERAGE_PERCENT}% | ![Coverage](https://img.shields.io/badge/Coverage-${COVERAGE_BADGE_LABEL}-${COVERAGE_BADGE_COLOR}) |"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

